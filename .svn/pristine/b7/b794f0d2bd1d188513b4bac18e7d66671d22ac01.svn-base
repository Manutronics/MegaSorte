#include "colorslider.h"
#include "ui_colorslider.h"
#include "layoutoverlay.h"
#include <QMessageBox>
#include <QtMath>
#include <QFile>

ColorSlider::ColorSlider(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::ColorSlider)
{
    ui->setupUi(this);


//        setStyleSheet("background:transparent;");
//        setAttribute(Qt::WA_TranslucentBackground);
//        setWindowFlags(Qt::FramelessWindowHint);

    ui->horizontalSlider->setRange(0, 511);//color slider
    ui->label->setAutoFillBackground(true);


//    ui->horizontalScrollBar->setRange(0, 2000);
//    ui->verticalScrollBar->setRange(0, 35000);

    // create connection between axes and scroll bars:
    connect(ui->horizontalScrollBar, SIGNAL(valueChanged(int)), this, SLOT(horzScrollBarChanged(int)));
    connect(ui->verticalScrollBar, SIGNAL(valueChanged(int)), this, SLOT(vertScrollBarChanged(int)));
    connect(ui->plot->xAxis, SIGNAL(rangeChanged(QCPRange)), this, SLOT(xAxisChanged(QCPRange)));
    connect(ui->plot->yAxis, SIGNAL(rangeChanged(QCPRange)), this, SLOT(yAxisChanged(QCPRange)));

    // initialize axis range (and scroll bar positions via signals we just connected):
    ui->plot->xAxis->setRange(0, 20, Qt::AlignLeft);
    ui->plot->yAxis->setRange(1, 60, Qt::AlignBottom);
    if(!funcao("d_mega.htm"))
        return;

    createGridNumbers(&labelNumbs1, ui->tab_2);
    createGridNumbers(&labelNumbs2, ui->tab_4);

//    ui->tab_2->setLayout(gbl);
    ui->tableWidget->verticalHeader()->setVisible(false);
    ui->tableWidget->horizontalHeader()->setVisible(false);
    ui->tableWidget->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    ui->tableWidget->horizontalHeader()->setSectionResizeMode(1, QHeaderView::ResizeToContents);
    for(int i = 8; i < 20; i++)
        ui->tableWidget->hideColumn(i);
    ui->tableWidget->setSelectionBehavior(QAbstractItemView::SelectRows);
    ui->tableWidget->scrollToBottom();

    ui->spnFrom->setEnabled(false);
    ui->spnTo->setMaximum(firstcol.count());
    ui->spnTo->setValue(firstcol.count());

    proc1 = new DataProcessing(firstcol.count(), this);
    proc2 = new DataProcessing(secondcol.count(), this);
    proc3 = new DataProcessing(thirdcol.count(), this);
    proc4 = new DataProcessing(fourthcol.count(), this);
    proc5 = new DataProcessing(fifethcol.count(), this);
    proc6 = new DataProcessing(sixthcol.count(), this);

}

ColorSlider::~ColorSlider()
{
    delete proc1;
    delete proc2;
    delete proc3;
    delete proc4;
    delete proc5;
    delete proc6;
    delete ui;
}

bool ColorSlider::funcao(QString filename)
{
    QVector<int> emptylines;
    QFile file(filename);
    QStringList lines;
    QString line;

    if(!file.open(QIODevice::ReadOnly))
    {
        QMessageBox::information(0, "error", file.errorString());
        return false;
    }

    QTextStream in(&file);
    int i = 0;

    while(!in.atEnd())
    {
        line += in.readLine();
        if(line.contains("</tr>"))
        {
            lines = line.split(QRegularExpression("\<tr.*?\>|\<\/tr\>"), QString::SkipEmptyParts);
            ui->tableWidget->setRowCount(ui->tableWidget->rowCount() + 1);
            foreach(QString sort, lines)
            {

                QStringList fields = sort.split(QRegularExpression("\<td.*?\>|\<\/td\>|&nbsp|\\s+\ts+\ts+"), QString::SkipEmptyParts);
                int j = 0;

                foreach(QString str, fields)
                {
                    if(str.contains("\r"))
                        continue;
                    QTableWidgetItem *lengthItem = new QTableWidgetItem(str);
                    ui->tableWidget->setItem(i, j, lengthItem);
                    if(j==2)
                        firstcol.append(str.toInt());
                    if(j==3)
                        secondcol.append(str.toInt());
                    if(j==4)
                        thirdcol.append(str.toInt());
                    if(j==5)
                        fourthcol.append(str.toInt());
                    if(j==6)
                        fifethcol.append(str.toInt());
                    if(j==7)
                        sixthcol.append(str.toInt());
                    j++;
                }
            }
            QTableWidgetItem *item1 = ui->tableWidget->item(i,0);
            if(item1)
            {
                if(item1->text().toInt()==0)
                {
                    QTableWidgetItem *item2 = ui->tableWidget->item(i-1,0);
                    if(item2->text().toInt()!=0)
                    {
                        emptylines.append(i);
                    }
                    else
                    {
                        emptylines.append(emptylines.last()+1);
                    }
//                    qDebug()<< "item1=" << i << "   text->" << item1->text() << "  diff=" << i - item2->text().toInt();
                }

            }
            else
            {
                i--;
            }
            i++;
            line.clear();
            lines.clear();

        }
    }
    file.close();
//    qDebug() << emptylines << "  size" << emptylines.size() << "   length" << emptylines.length() << endl;
    for(int k = emptylines.length()-1; k >= 0; k--)
    {
        ui->tableWidget->removeRow(emptylines[k]);
    }
    ui->tableWidget->setRowCount(i-emptylines.length());
    qDebug() << firstcol.size();
    return true;
}

void ColorSlider::on_horizontalSlider_sliderMoved(int position)
{
    QPalette palette;
    QColor color;
    int r, g, b;
    r = 255;
    g = (255 - (511 - position))>0?qFloor(256 - (255 - (511 - position))):255;
    b = (255 - (511 - position))<0?qFloor(511 - (position * 2)/2):0;
    color.setRgb(qRgb(r, g, b));
    palette.setColor(ui->label->backgroundRole(), color);
    ui->label->setPalette(palette);
}

void ColorSlider::setupPlot(QVector<int> *parx)
{
//    int i, j;
    // The following plot setup is mostly taken from the plot demos:
    ui->plot->addGraph();
    ui->plot->graph()->setPen(QPen(Qt::blue));
    ui->plot->graph()->setBrush(QBrush(QColor(0, 0, 255, 20)));
    QVector<double> x(parx->size()), y(parx->size());
//    float inB[proc1->getSize()], xfft[proc1->getSize()];
//    // test sinusoid
//    for ( i = j = firstcol.count()-proc1->getSize(); i < firstcol.count(); i++)
//    {

//        inB[i - j] = (float)firstcol[i];
//        xfft[i - j] = (float)i-proc1->getSize();
//    } // for

//    proc1->windowFFT(inB);
//    proc1->FFT();
//    proc1->powerScale(inB);

    for (int i = 0; i < parx->size(); i++)
    {
        x.append(parx->at(i));
        y.append(i);
    }

    ui->plot->graph(0)->setData(y, x);
    ui->plot->axisRect()->setupFullAxesBox(true);
    ui->plot->setInteractions(QCP::iRangeDrag | QCP::iRangeZoom);
}

void ColorSlider::horzScrollBarChanged(int value)
{
    if (qAbs(ui->plot->xAxis->range().center()-value/100.0) > 0.01) // if user is dragging plot, we don't want to replot twice
    {
        ui->plot->xAxis->setRange(value/100.0, ui->plot->xAxis->range().size(), Qt::AlignCenter);
        ui->plot->replot();
    }
}

void ColorSlider::vertScrollBarChanged(int value)
{
    if (qAbs(ui->plot->yAxis->range().center()+value/100.0) > 0.01) // if user is dragging plot, we don't want to replot twice
    {
        ui->plot->yAxis->setRange(-value/100.0, ui->plot->yAxis->range().size(), Qt::AlignCenter);
        ui->plot->replot();
    }
}

void ColorSlider::xAxisChanged(QCPRange range)
{
    ui->horizontalScrollBar->setValue(qRound(range.center()*100.0)); // adjust position of scroll bar slider
    ui->horizontalScrollBar->setPageStep(qRound(range.size()*100.0)); // adjust size of scroll bar slider
}

void ColorSlider::yAxisChanged(QCPRange range)
{
    ui->verticalScrollBar->setValue(qRound(-range.center()*100.0)); // adjust position of scroll bar slider
    ui->verticalScrollBar->setPageStep(qRound(range.size()*100.0)); // adjust size of scroll bar slider
}


void ColorSlider::on_btnSelect_clicked()
{
    int sorteio = 1700;
    int coluna = 2;
    QTableWidgetItem *item1 = ui->tableWidget->item(sorteio-1, coluna++);
    qDebug() << item1->text() << firstcol[sorteio-1];
    item1 = ui->tableWidget->item(sorteio-1, coluna++);
    qDebug() << item1->text() << secondcol[sorteio-1];
    item1 = ui->tableWidget->item(sorteio-1, coluna++);
    qDebug() << item1->text() << thirdcol[sorteio-1];
    item1 = ui->tableWidget->item(sorteio-1, coluna++);
    qDebug() << item1->text() << fourthcol[sorteio-1];
    item1 = ui->tableWidget->item(sorteio-1, coluna++);
    qDebug() << item1->text() << fifethcol[sorteio-1];
    item1 = ui->tableWidget->item(sorteio-1, coluna);
    qDebug() << item1->text() << sixthcol[sorteio-1];
    setupPlot(&firstcol);
    colorizeSequence(firstcol, 1700, 1711, 6);

    LoadingOverlay *lo = new LoadingOverlay(ui->tab_2, &line);
    lo->setObjectName("mypath");
    emit ui->tab_2->resize(this->size());
    int upto = ui->spnTo->value();
    proc1->calcNumOccurrences(firstcol, upto);
    proc1->calcIntervalsMean(firstcol, upto);
    proc2->calcNumOccurrences(secondcol, upto);
    proc2->calcIntervalsMean(secondcol, upto);
    proc3->calcNumOccurrences(thirdcol, upto);
    proc3->calcIntervalsMean(thirdcol, upto);
    proc4->calcNumOccurrences(fourthcol, upto);
    proc4->calcIntervalsMean(fourthcol, upto);
    proc5->calcNumOccurrences(fifethcol, upto);
    proc5->calcIntervalsMean(fifethcol, upto);
    proc6->calcNumOccurrences(sixthcol, upto);
    proc6->calcIntervalsMean(sixthcol, upto);
    ui->btnSelect->setText(QString("%1 %2").arg(proc1->column.mostvalue).arg(proc1->column.leastvalue));
    QWidget *nova = new QWidget(ui->tableWidget);
    ui->tabWidget->addTab(nova, "nova");
    createGridNumbers(&labelNumbs3, nova);
}

void ColorSlider::colorizeSequence(QVector<int> vect, int start, int finish, int column)
{
    QString border;
    switch(column)
    {
    case 2:
        border = "border: 2px solid blue;";
        break;
    case 3:
        border = "border: 2px solid yellow;";
        break;
    case 4:
        border = "border: 2px solid cyan;";
        break;
    case 5:
        border = "border: 2px solid green;";
        break;
    case 6:
        border = "border: 2px solid red;";
        break;
    case 7:
        border = "border: 2px solid grey;";
        break;
    default:
        return;
    }

    double percentage = (511 - (finish-start&0x1FF))/511.0;

    for(int i = start, cr = 4095; i < finish; i++, cr -=(4095/(finish-start)))
    {
        QString complement = QString("background: #%1%2FFF").arg(cr, 3, 16,QChar('0')).arg(cr, 3, 16,QChar('0'));
        labelNumbs1[vect[i]-1]->setStyleSheet(border+complement);
        if(i==start)
        {
            QPoint p = labelNumbs1[vect[i]-1]->pos();
            int woff = labelNumbs1[vect[i]-1]->width()/2;
            int hoff = labelNumbs1[vect[i]-1]->height()/2;
            p.setX(p.x()+woff);
            p.setY(p.y()+hoff);
            line.moveTo(p);
        }
        else
        {
            QPoint p = labelNumbs1[vect[i]-1]->pos();
            int woff = labelNumbs1[vect[i]-1]->width()/2;
            int hoff = labelNumbs1[vect[i]-1]->height()/2;
            p.setX(p.x()+woff);
            p.setY(p.y()+hoff);
            line.lineTo(p);
        }
    }
    update();
}

void ColorSlider::wheelEvent(QWheelEvent * event)
{
    static int index = firstcol.size()-1;

    if(ui->tab_2->isVisible())
    {
        QColor color;
        QPalette palette;
        color.setBlue(0xFF);
        color.setGreen(0xFF);
        color.setRed(0xFF);

        palette.setColor(labelNumbs1[firstcol[index]-1]->backgroundRole(), color);
        labelNumbs1[firstcol[index]-1]->setPalette(palette);
        palette.setColor(labelNumbs1[secondcol[index]-1]->backgroundRole(), color);
        labelNumbs1[secondcol[index]-1]->setPalette(palette);
        palette.setColor(labelNumbs1[thirdcol[index]-1]->backgroundRole(), color);
        labelNumbs1[thirdcol[index]-1]->setPalette(palette);
        palette.setColor(labelNumbs1[fourthcol[index]-1]->backgroundRole(), color);
        labelNumbs1[fourthcol[index]-1]->setPalette(palette);
        palette.setColor(labelNumbs1[fifethcol[index]-1]->backgroundRole(), color);
        labelNumbs1[fifethcol[index]-1]->setPalette(palette);
        palette.setColor(labelNumbs1[sixthcol[index]-1]->backgroundRole(), color);
        labelNumbs1[sixthcol[index]-1]->setPalette(palette);

        if(event->angleDelta().ry()>0)
        {
            index++;
            if(index>(firstcol.count()-1))
                index = firstcol.count()-1;

//            qDebug()<< "ifirstcol[index]" << firstcol[index] << index;
        }
        else
        {
            index--;
            if(index < 0)
                index = 0;
//            qDebug()<< "efirstcol[index]" << firstcol[index] << index;
        }
        color.setBlue(0x00);
        color.setGreen(0x00);
        color.setRed(0xFF);
        palette.setColor(labelNumbs1[firstcol[index]-1]->backgroundRole(), color);
        labelNumbs1[firstcol[index]-1]->setPalette(palette);
        color.setBlue(0x00);
        color.setGreen(0xFF);
        color.setRed(0x00);
        palette.setColor(labelNumbs1[secondcol[index]-1]->backgroundRole(), color);
        labelNumbs1[secondcol[index]-1]->setPalette(palette);
        color.setBlue(0xFF);
        color.setGreen(0x00);
        color.setRed(0x00);
        palette.setColor(labelNumbs1[thirdcol[index]-1]->backgroundRole(), color);
        labelNumbs1[thirdcol[index]-1]->setPalette(palette);
        color.setBlue(0xFF);
        color.setGreen(0xFF);
        color.setRed(0x00);
        palette.setColor(labelNumbs1[fourthcol[index]-1]->backgroundRole(), color);
        labelNumbs1[fourthcol[index]-1]->setPalette(palette);
        color.setBlue(0xFF);
        color.setGreen(0x00);
        color.setRed(0xFF);
        palette.setColor(labelNumbs1[fifethcol[index]-1]->backgroundRole(), color);
        labelNumbs1[fifethcol[index]-1]->setPalette(palette);
        color.setBlue(0x00);
        color.setGreen(0xFF);
        color.setRed(0xFF);
        palette.setColor(labelNumbs1[sixthcol[index]-1]->backgroundRole(), color);
        labelNumbs1[sixthcol[index]-1]->setPalette(palette);
    }
}

void ColorSlider::createGridNumbers(QList<QLabel *> *numbs, QWidget *tab)
{
    QPalette palette;
    QColor color;
    QGridLayout *gbl = new QGridLayout(this);
    for(int i = 1, p = 0; i < 7; i++)
    {
        for(int j = 1; j < 11;j++, p++)
        {
            QLabel *lblnum = new QLabel(QString("%1").arg(p+1, 2, 10,QChar('0')));
            (*numbs) << lblnum;
            gbl->addWidget(lblnum, i, j);
            (*numbs)[p]->setAutoFillBackground(true);
            color.setBlue(0xFF);
            color.setGreen(0xFF);
            color.setRed(0xFF);
            palette.setColor((*numbs)[p]->backgroundRole(), color);
            (*numbs)[p]->setPalette(palette);
            (*numbs)[p]->setAlignment(Qt::AlignCenter);
        }
    }
    gbl->setSpacing(23);
    color.setBlue(0xFF);
    color.setGreen(0x55);
    color.setRed(0xFF);
    palette.setColor((*numbs)[firstcol.last()-1]->backgroundRole(), color);
    (*numbs)[firstcol.last()-1]->setPalette(palette);
    palette.setColor((*numbs)[secondcol.last()-1]->backgroundRole(), color);
    (*numbs)[secondcol.last()-1]->setPalette(palette);
    palette.setColor((*numbs)[thirdcol.last()-1]->backgroundRole(), color);
    (*numbs)[thirdcol.last()-1]->setPalette(palette);
    palette.setColor((*numbs)[fourthcol.last()-1]->backgroundRole(), color);
    (*numbs)[fourthcol.last()-1]->setPalette(palette);
    palette.setColor((*numbs)[fifethcol.last()-1]->backgroundRole(), color);
    (*numbs)[fifethcol.last()-1]->setPalette(palette);
    palette.setColor((*numbs)[sixthcol.last()-1]->backgroundRole(), color);
    (*numbs)[sixthcol.last()-1]->setPalette(palette);
    tab->setLayout(gbl);
    tab->setMaximumHeight(320);
    tab->setMinimumHeight(120);
    tab->setMaximumWidth(640);
    tab->setMinimumWidth(240);
}

void ColorSlider::paintEvent(QPaintEvent *event)
{
//    LoadingOverlay *lo = ui->tab_2->findChild<LoadingOverlay *>("mypath");
//    if(lo != NULL)
//    {
//        delete lo;
//        colorizeSequence(firstcol, 1700, 1711, 6);
//        LoadingOverlay *ll = new LoadingOverlay(ui->tab_2, &line);
//        ll->setObjectName("mypath");
//        emit ui->tab_2->resize(this->size());
//    }
}

void ColorSlider::on_pushButton_clicked()
{
    qDebug() << proc1->genPass(proc1->column.probablyValues);
    qDebug() << proc2->genPass(proc2->column.probablyValues);
    qDebug() << proc3->genPass(proc3->column.probablyValues);
    qDebug() << proc4->genPass(proc4->column.probablyValues);
    qDebug() << proc5->genPass(proc5->column.probablyValues);
    qDebug() << proc6->genPass(proc6->column.probablyValues);
}

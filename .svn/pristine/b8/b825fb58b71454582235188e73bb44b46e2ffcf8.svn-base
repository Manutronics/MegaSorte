#ifndef DATAPROCESSING_H
#define DATAPROCESSING_H

#include <QWidget>
#include <QtMath>
#include <random>

typedef std::mt19937 RngEngine;

class Column
{
public:
    explicit Column(){}
    int mostvalue;
    int mostcount;
    int leastvalue;
    int leastcount;
    int occurence[60];
    int *mininterval;
    int *maxinterval;
    int *delta;
    int *currInterval;
    QVector<int> probablyValues;
    QVector<int> quadrant;
    QVector<int> nextquadrant;
};

class DataProcessing : public QWidget
{
    Q_OBJECT
public:
    explicit DataProcessing(int vectCount, QWidget *parent = 0);
    ~DataProcessing();

    // preparation of the rotation vectors
    void initFFT( void);
    // input window
    void windowFFT(float *s);
    // fast fourier transform
    void FFT( void);
    // compute power and scale output
    void powerScale(float *r);
    int checkPower2(int num);
    int getSize();
    void calcNumOccurrences(QVector<int> &list, int until);
    void calcIntervalsMean(QVector<int> &list, int until);
    int genPass(QVector<int> &list);
    void findQuadrants(QVector<int> &list);
    void nextQuadrantEstatistical(int qdrnt);
    void showIntervalsOf(int num, QVector<int> &value);

    const float PI2N;

    Column column;

private:


    // input complex vector
    float   *xr;
    float   *xi;

    // rotation vectors
    float   *wr;
    float   *wi;

    // bit reversal vector
    int   *rev;

    // window
    float   *ww;

    int inCount;

    RngEngine m_rngEngine;

signals:

public slots:
};

#endif // DATAPROCESSING_H
